KERNEL API OF LeXdPyK

discord.py: on-*
Supported events:

on-connect
on-disconnect
on-ready
on-resumed
on-message
on-message-delete
on-bulk-message-delete
on-bulk-message-delete
on-raw-bulk-message-delete
on-message-edit
on-raw-message-edit
on-reaction-add
on-raw-reaction-add
on-reaction-remove
on-raw-reaction-remove
on-reaction-clear
on-raw-reaction-clear
on-reaction-clear-emoji
on-raw-reaction-clear-emoji
on-member-join
on-member-remove
on-member-update
on-guild-join
on-guild-remove
on-guild-update
on-member-ban
on-member-unban


Event kwargs (Kernel args):

kernel_version # The current kernels version string
bot_start # The unix timestamp of when the bot started
client # The discord.py client
ramfs # A ramfs that is cleared every module reload
kernel_ramfs # A ramfs that is not cleared until restarted
command_modules=[command_modules, command_modules_dict] # A list of the command modules and a hmap of their functions, to be used as an implementation of discord commands
dynamiclib_modules=[dynamiclib_modules, dynamiclib_modules_dict] # A list of the dynamiclib modules and a hmap of their functions, used for event handlers


Kernel ramfs format:

# Note, '..' '.' and '/' directory locations are not supported in parser as all actions occur in the root directory 
ramfs.mkdir(dir) # makes a dir with specified path
ramfs.rmdir(dir) # removes a dir at specified path
ramfs.tree(*dir(optional)) # returns a treemap of every folder and file from origin
ramfs.ls(*dir(optional)) # returns a listmap of every folder and file in current dir

ramfs.create_f(path) # Creates a file in location, if folders do not exist it will make them
ramfs.read_f(path) # Reads a file in a location, raises FileNotFoundError if dir or file does not exist
ramfs.remove_f(path) # Deletes a file, raises FileNotFoundError if dir or file does not exist


Passing from kernel to event handlers:
dynamiclib_modules_dict[event-name](*args-of-dpy-event, **kernel-kwargs)

